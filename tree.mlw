module ParametricBST

    use int.Int

    type key = int
    type tree = Leaf | Node tree key tree

    (* self-defined predicate/axioms *)
    predicate tree_less (t : tree) (k : key) = 
        match t with 
          Leaf -> true 
        | (Node l k1 r) -> (tree_less l k) /\ (k1 < k) /\ (tree_less r k) 
        end 
    
    predicate tree_greater (t : tree) (k : key) = 
        match t with 
          Leaf -> true 
        | (Node l k1 r) -> (tree_greater l k) /\ (k1 > k) /\ (tree_greater r k) 
        end

    predicate contains (t : tree) (k : key) =
        match t with 
          Leaf -> false 
        | (Node l k1 r) -> k1 = k \/ contains l k \/ contains r k
        end
    
    predicate valid_tree (t : tree) = 
        match t with 
          Leaf -> true 
        | (Node l k r) -> valid_tree l /\ tree_less l k /\ contains l k = false
            /\ valid_tree r /\ tree_greater r k /\ contains r k = false
            /\ (forall k1. (k1 < k /\ contains t k1) -> contains l k1)
            /\ (forall k1. (k1 > k /\ contains t k1) -> contains r k1)
        (* | (Node l k r) -> (tree_less l k) /\ (tree_greater r k) /\ (valid_tree l) /\ (valid_tree r)
            /\ (contains l k = false) /\ (contains r k = false)
            /\ (forall k1. (k1 < k /\ contains t k1) -> contains l k1)
            /\ (forall k1. (k1 > k /\ contains t k1) -> contains r k1) *)
        end

    (* split and join*)
    val split (t : tree) (k : key) : (tree, bool, tree)
    requires {valid_tree t}
    (* ensures {let (l, b, r) = result in
        valid_tree l /\ valid_tree r /\ tree_less l k /\ tree_greater r k /\ b = contains t k
        /\ contains l k = false /\ contains r k = false} *)
    ensures {let (l, _, _) = result in forall k1. (k1 < k /\ contains t k1) -> contains l k1}
    ensures {let (_, _, r) = result in forall k1. (k1 > k /\ contains t k1) -> contains r k1}
    ensures {let (l, _, _) = result in valid_tree l /\ tree_less l k /\ contains l k = false}
    ensures {let (_, _, r) = result in valid_tree r /\ tree_greater r k /\ contains r k = false}
    ensures {let (_, b, _) = result in b = contains t k}

    val join (t1 : tree) (t2 : tree) : tree
    requires {valid_tree t1 /\ valid_tree t2}
    ensures {valid_tree result}
    ensures {forall k. (contains t1 k \/ contains t2 k) <-> contains result k}

    (* tree functions *)
    let empty () : tree = 
        ensures {valid_tree result}
        ensures {forall k. contains result k = false}
        Leaf

    let singleton (k : key) : tree =
        ensures {valid_tree result}
        ensures {contains result k}
        ensures {forall k1. k1 <> k -> contains result k1 = false}
        Node Leaf k Leaf

    let delete (t : tree) (k : key) : tree =
        requires {valid_tree t}
        ensures {valid_tree result}
        ensures {contains result k = false}
        let (l, _, r) = split t k in 
        join l r

    let joinM (t1 : tree) (k : key) (t2 : tree) : tree = 
        requires {valid_tree t1 /\ valid_tree t2}
        ensures {valid_tree result}
        ensures {forall k1. (contains t1 k1 \/ contains t2 k1 \/ k1 = k) <-> contains result k1}
        ensures {contains result k}
        join t1 (join (singleton k) t2)

    let insert (t : tree) (k : key) : tree =
        requires {valid_tree t}
        ensures {valid_tree result}
        ensures {forall k1. (k1 <> k /\ contains t k1) -> contains result k1}
        ensures {contains result k}
        (* ensures {forall k1. (contains t k1 \/ k1 = k) <-> contains result k1} *)
        let (l, _, r) = split t k in 
        joinM l k r

    let rec intersection (t1 : tree) (t2 : tree) : tree =
        requires {valid_tree t1 /\ valid_tree t2}
        variant {t1}
        ensures {valid_tree result}
        ensures {forall k1. (contains t1 k1 /\ contains t2 k1) -> contains result k1}
        match (t1, t2) with
          (Leaf, _) -> Leaf 
        | (_, Leaf) -> Leaf 
        | (Node l1 k1 r1, _) ->
            let (l2, b, r2) = split t2 k1 in
            let l = intersection l1 l2 in
            let r = intersection r1 r2 in 
            if b then joinM l k1 r else join l r 
        end

    (* t1 - t2 *)
    let rec difference (t1 : tree) (t2 : tree) : tree =
        requires {valid_tree t1 /\ valid_tree t2}
        variant {t1}
        ensures {valid_tree result}
        ensures {forall k. (contains t1 k = false) -> (not contains result k)}
        ensures {forall k. (contains t1 k /\ contains t2 k) -> (not contains result k)}
        ensures {forall k. (contains t1 k /\ (not contains t2 k)) -> contains result k}
        match (t1, t2) with 
          (Leaf, _) -> Leaf 
        | (_, Leaf) -> t1 
        | (Node l1 k r1, _) ->
            let (l2, b, r2) = split t2 k in 
            let l = difference l1 l2 in 
            let r = difference r1 r2 in 
            assert { contains l k = false } ;
            assert { contains r k = false } ;
            if b then 
              (assert { contains t2 k } ;
              join l r)
            else 
              (assert { contains t2 k = false } ;
              joinM l k r )
        end 

    let rec union (t1 : tree) (t2 : tree) : tree =
        requires {valid_tree t1 /\ valid_tree t2}
        variant {t1}
        ensures {valid_tree result}
        ensures {forall k1. (contains t1 k1 \/ contains t2 k1) -> contains result k1}
        match (t1 ,t2) with 
          (Leaf, _) -> t2 
        | (_, Leaf) -> t1 
        | (Node l1 k1 r1, _) ->
            let (l2, _, r2) = split t2 k1 in 
            let l = union l1 l2 in 
            let r = union r1 r2 in 
            joinM l k1 r
        end

end